/**
 * 清空库中所有数据:jedis.flushDB()
 * key:
 * 判断key999键是否存在:shardedJedis.exists("key999")
 * 新增key001,value001键值对：shardedJedis.set("key001", "value001")
 * 取所有key的set集合：jedis.keys("*")
 * 删除key002:jedis.del("key002")
 * 设置key001的过期时间为5秒:jedis.expire("key001", 5)
 * 查看key001的剩余生存时间：jedis.ttl("key001")
 * 移除key001的生存时间：jedis.persist("key001")
 * 查看key所储存的值的类型：jedis.type("key001")
 * 修改键名：jedis.rename("oldkey", "newkey");
 * 将当前db的key移动到给定的db当中：jedis.move("key6", 1)
 * String
 * 获取key为key001的值：jedis.get("key001")
 * 删除key003键值对：jedis.del("key003")
 * 直接覆盖key001原来的数据：jedis.set("key001","value001-update")
 * 在key002原来值后面追加：jedis.append("key002","+appendString")
 * 增加多组k-v：jedis.mset()
 * 获取多组k的值：jedis.mget()
 * 一次性删除key201,key202：jedis.del(new String[]{"key201", "key202"})
 * 原先key301不存在时，新增key301：shardedJedis.setnx("key301", "value301")
 * 新增key303，并指定过期时间为2秒：shardedJedis.setex("key303", 2, "key303-2second")
 * key302原值(新值为value302-after-getset)：shardedJedis.getSet("key302", "value302-after-getset")
 * 获取key302对应值中的子串：shardedJedis.getrange("key302", 5, 7)
 * list
 * 左插入:shardedJedis.lpush("stringlists", "vector")
 * 所有元素-stringlists：shardedJedis.lrange("stringlists", 0, -1)
 * 成功删除指定元素个数-stringlists：shardedJedis.lrem("stringlists", 2, "vector")
 * 删除下标0-3区间之外的元素：shardedJedis.ltrim("stringlists", 0, 3)
 * 出栈元素：shardedJedis.lpop("stringlists")
 * 修改指定下标的值：shardedJedis.lset("stringlists", 0, "hello list!")
 * 长度-stringlists：shardedJedis.llen("stringlists")
 * 返回排序后的结果-stringlists：shardedJedis.sort("stringlists",sortingParameters)
 * 获取下标为2的元素：shardedJedis.lindex("stringlists", 2)
 * 子串-第二个开始到结束：shardedJedis.lrange("stringlists", 1, -1)
 * set
 * 向sets集合中加入元素element001：jedis.sadd("sets", "element001")
 * 查看sets集合中的所有元素:jedis.smembers("sets")
 * 集合sets中删除元素element003：jedis.srem("sets", "element003")
 * 判断element001是否在集合sets中：jedis.sismember("sets", "element001")
 * sets1和sets2交集：jedis.sinter("sets1", "sets2")
 * sets1和sets2并集：jedis.sunion("sets1", "sets2")
 * sets1和sets2差集：jedis.sdiff("sets1", "sets2")
 * zset
 * zset中添加元素element001：shardedJedis.zadd("zset", 7.0, "element001")
 * zset集合中的所有元素：shardedJedis.zrange("zset", 0, -1)
 * zset中删除元素element002：shardedJedis.zrem("zset", "element002")
 * 统计zset集合中的元素中个数：shardedJedis.zcard("zset")
 * 统计zset集合中权重某个范围内（1.0——5.0），元素的个数："+shardedJedis.zcount("zset", 1.0, 5.0)
 * 查看zset集合中element004的权重："+shardedJedis.zscore("zset", "element004")
 * 查看下标1到2范围内的元素值："+shardedJedis.zrange("zset", 1, 2)
 * Hash
 * hashs中添加key001和value001键值对："+shardedJedis.hset("hashs", "key001", "value001")
 * 新增key004和4的整型键值对："+shardedJedis.hincrBy("hashs", "key004", 4l)
 * hashs中的所有值："+shardedJedis.hvals("hashs")
 * hashs中删除key002键值对："+shardedJedis.hdel("hashs", "key002")
 * key004整型键值的值增加100："+shardedJedis.hincrBy("hashs", "key004", 100l)
 * 判断key003是否存在："+shardedJedis.hexists("hashs", "key003")
 * 获取key004对应的值："+shardedJedis.hget("hashs", "key004")
 * 批量获取key001和key003对应的值："+shardedJedis.hmget("hashs", "key001", "key003")
 * 获取hashs中所有的key："+shardedJedis.hkeys("hashs")
 * 获取hashs中所有的value："+shardedJedis.hvals("hashs")
 */